{"version":3,"sources":["CounterSettings/Display/SettingsDisplay.module.css","CounterTable/Display/Display.module.css","common/Button/Button.module.css","CounterTable/Counter.module.css","CounterSettings/CounterSettings.module.css","CounterTable/Display/Display.tsx","common/Button/Button.tsx","CounterTable/Counter.tsx","CounterSettings/Display/SettingsDisplay.tsx","CounterSettings/CounterSettings.tsx","App.tsx","common/localStorage.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Display","props","displayMessageClass","helpMessage","includes","s","error","simple_number","help_message","spanClass","currentValue","maxNum","end_number","className","counter_wrapper","length","Button","button_wrapper","toggle","disabled","button","onClick","callback","title","Counter","minToggle","minNum","maxToggle","main_container","increaseNumberCallback","resetNumberCallback","SettingsDisplay","inputErrorClass","number","type","value","onChange","e","changeMaxValue","Number","currentTarget","input","changeMinValue","CounterSettings","setToggle","setValue","App","useState","setCurrentValue","state","key","defaultState","stateAsString","localStorage","getItem","JSON","parse","restoreState","min","max","setMin","setMax","setHelpMessage","saveToStorage","stringify","setItem","saveState","plusValue","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.47ac264f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter_wrapper\":\"SettingsDisplay_counter_wrapper__3pj-5\",\"number\":\"SettingsDisplay_number__3fA2g\",\"input\":\"SettingsDisplay_input__3Mqz9\",\"error\":\"SettingsDisplay_error__1HDbT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter_wrapper\":\"Display_counter_wrapper__20pdk\",\"simple_number\":\"Display_simple_number__yyafu\",\"end_number\":\"Display_end_number__359s_\",\"error\":\"Display_error__mN1E9\",\"help_message\":\"Display_help_message__2UPMs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button_wrapper\":\"Button_button_wrapper__21VL0\",\"button\":\"Button_button__3_Oae\",\"disabled\":\"Button_disabled__WgEGS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_container\":\"Counter_main_container__3elew index_counter_wrapper__3Ehh4\",\"button_wrapper\":\"Counter_button_wrapper__-ULer index_btn_counter_wrapper__3wVKY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_container\":\"CounterSettings_main_container__22FaH index_counter_wrapper__3Ehh4\",\"button_wrapper\":\"CounterSettings_button_wrapper__379o9 index_btn_counter_wrapper__3wVKY\"};","import React from 'react';\r\nimport s from './Display.module.css'\r\n\r\ntype DisplayPropsType = {\r\n    maxNum: number\r\n    helpMessage: string\r\n    currentValue: number\r\n}\r\n\r\nexport function Display(props: DisplayPropsType) {\r\n\r\n    const displayMessageClass = props.helpMessage.includes('incorrect')\r\n        ? `${s.error} ${s.simple_number}`\r\n        : `${s.help_message} ${s.simple_number}`\r\n\r\n    const spanClass = props.currentValue === props.maxNum\r\n        ? `${s.end_number} ${s.simple_number}`\r\n        : s.simple_number\r\n\r\n    return (\r\n        <div className={s.counter_wrapper}>\r\n            {props.helpMessage.length !== 0\r\n                ? <p className={displayMessageClass}>{props.helpMessage}</p>\r\n                : <span className={spanClass}>\r\n                    {props.currentValue}</span>\r\n            }\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Button.module.css'\r\n\r\ntype ButtonPropsType = {\r\n    callback: () => void\r\n    title: string\r\n    toggle: boolean\r\n}\r\n\r\nexport const Button: React.FC<ButtonPropsType> = (props: ButtonPropsType) => {\r\n    return (\r\n        <div className={s.button_wrapper}>\r\n            <button className={props.toggle ? `${s.disabled} ${s.button}` : s.button}\r\n                    onClick={props.callback}\r\n                    disabled={props.toggle}>\r\n                {props.title}\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\r\nimport {Display} from './Display/Display';\r\nimport {Button} from '../common/Button/Button';\r\nimport s from './Counter.module.css'\r\n\r\ntype CounterPropsType = {\r\n    minNum: number\r\n    maxNum: number\r\n    helpMessage: string\r\n    currentValue: number\r\n    resetNumberCallback: () => void\r\n    increaseNumberCallback: () => void\r\n}\r\n\r\nexport const Counter: React.FC<CounterPropsType> = (props) => {\r\n\r\n    const minToggle = props.currentValue === props.minNum || props.helpMessage.length != 0\r\n    const maxToggle = props.currentValue >= props.maxNum || props.helpMessage.length != 0\r\n\r\n    return (\r\n        <div className={s.main_container}>\r\n            <Display currentValue={props.currentValue}\r\n                     helpMessage={props.helpMessage}\r\n                     maxNum={props.maxNum}\r\n            />\r\n            <div className={s.button_wrapper}>\r\n                <Button callback={props.increaseNumberCallback}\r\n                        title={'start'}\r\n                        toggle={maxToggle}/>\r\n                <Button callback={props.resetNumberCallback}\r\n                        title={'reset'}\r\n                        toggle={minToggle}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './SettingsDisplay.module.css'\r\n\r\ntype DisplayPropsType = {\r\n    maxNum: number\r\n    minNum: number\r\n    helpMessage: string\r\n    changeMaxValue: (value: number) => void\r\n    changeMinValue: (value: number) => void\r\n}\r\n\r\nexport const SettingsDisplay: React.FC<DisplayPropsType> = (props) => {\r\n\r\n    const inputErrorClass = props.helpMessage.includes('incorrect')\r\n\r\n    const onChangeMaxHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeMaxValue(Number(e.currentTarget.value))\r\n    }\r\n    const onChangeMinHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeMinValue(Number(e.currentTarget.value))\r\n    }\r\n    return (\r\n        <div className={s.counter_wrapper}>\r\n            <div className={s.number}>\r\n                <h4>max value:</h4>\r\n                <input type=\"number\"\r\n                       value={props.maxNum}\r\n                       onChange={onChangeMaxHandler}\r\n                       className={inputErrorClass? `${s.error} ${s.input}`: s.input}\r\n                />\r\n            </div>\r\n            <div className={s.number}>\r\n                <h4>min value:</h4>\r\n                <input type=\"number\"\r\n                       value={props.minNum}\r\n                       onChange={onChangeMinHandler}\r\n                       className={inputErrorClass? `${s.error} ${s.input}`: s.input}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {SettingsDisplay} from './Display/SettingsDisplay';\r\nimport s from './CounterSettings.module.css'\r\nimport {Button} from '../common/Button/Button';\r\n\r\ntype CounterPropsType = {\r\n    maxNum: number\r\n    minNum: number\r\n    helpMessage: string\r\n    setValue: () => void\r\n    changeMaxValue: (value: number) => void\r\n    changeMinValue: (value: number) => void\r\n}\r\n\r\nexport const CounterSettings: React.FC<CounterPropsType> = (props) => {\r\n\r\n    const setToggle = props.helpMessage.includes('incorrect') || props.helpMessage.length === 0\r\n\r\n    return (\r\n        <div className={s.main_container}>\r\n            <SettingsDisplay maxNum={props.maxNum}\r\n                             minNum={props.minNum}\r\n                             helpMessage={props.helpMessage}\r\n                             changeMaxValue={props.changeMaxValue}\r\n                             changeMinValue={props.changeMinValue}\r\n            />\r\n            <div className={s.button_wrapper}>\r\n                <Button callback={props.setValue}\r\n                        title={'set'}\r\n                        toggle={setToggle}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport {Counter} from './CounterTable/Counter';\nimport {CounterSettings} from './CounterSettings/CounterSettings';\nimport {restoreState, saveState} from './common/localStorage';\n\ntype ValueType = {\n    min: number\n    max: number\n}\n\nfunction App() {\n    let [currentValue, setCurrentValue] = useState<number>(0)\n\n    const state: ValueType = restoreState<ValueType>('value', {min: 0, max: 5});\n\n    let [min, setMin] = useState<number>(state.min)\n    let [max, setMax] = useState<number>(state.max)\n\n    let [helpMessage, setHelpMessage] = useState<string>('')\n\n    function saveToStorage() {\n        saveState<ValueType>('value', {min: min, max: max});\n    };\n\n    function increaseNumberCallback() {\n        let plusValue = currentValue += 1\n        setCurrentValue(plusValue)\n    }\n\n    function resetNumberCallback() {\n        setCurrentValue(min)\n    }\n\n    function changeMaxValue(value: number) {\n        setMax(value)\n        if (value <= min) {\n            setHelpMessage('incorrect value')\n        } else {\n            setHelpMessage(`enter values and press 'set'`)\n        }\n    }\n\n    function changeMinValue(value: number) {\n        setMin(value)\n        if (value < 0 || value > max || value === max) {\n            setHelpMessage('incorrect value')\n        } else {\n            setHelpMessage(`enter values and press 'set'`)\n        }\n    }\n\n    function setValue() {\n        saveToStorage()\n        setCurrentValue(min)\n        setHelpMessage('')\n    }\n\n    return (\n        <div className='App'>\n            <CounterSettings minNum={min}\n                             maxNum={max}\n                             setValue={setValue}\n                             helpMessage={helpMessage}\n                             changeMaxValue={changeMaxValue}\n                             changeMinValue={changeMinValue}\n            />\n            <Counter minNum={min}\n                     maxNum={max}\n                     helpMessage={helpMessage}\n                     currentValue={currentValue}\n                     resetNumberCallback={resetNumberCallback}\n                     increaseNumberCallback={increaseNumberCallback}\n            />\n        </div>\n    )\n}\n\nexport default App;\n","export function saveState<T>(key: string, state: T) {\r\n    const stateAsString = JSON.stringify(state);\r\n    localStorage.setItem(key, stateAsString)\r\n}\r\n\r\nexport function restoreState<T>(key: string, defaultState: T) {\r\n    const stateAsString = localStorage.getItem(key);\r\n    if (stateAsString !== null) defaultState = JSON.parse(stateAsString) as T;\r\n    return defaultState;\r\n}\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}