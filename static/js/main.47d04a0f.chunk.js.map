{"version":3,"sources":["CounterTable/Display/Display.module.css","common/Button/Button.module.css","common/Input/Input.module.css","CounterTable/Counter.module.css","CounterSettings/CounterSettings.module.css","CounterSettings/Display/SettingsDisplay.module.css","Redux/actions.ts","CounterTable/Display/Display.tsx","common/Button/Button.tsx","CounterTable/CounterDispaly.tsx","common/Input/Input.tsx","CounterSettings/Display/SettingsDisplay.tsx","CounterSettings/CounterSettings.tsx","App.tsx","serviceWorker.ts","Redux/counter-reducer.ts","Redux/state.ts","index.tsx"],"names":["module","exports","ACTIONS_TYPE","Display","maxNum","currentValue","helpMessage","displayMessageClass","includes","s","error","simple_number","help_message","spanClass","end_number","className","counter_wrapper","length","Button","props","button_wrapper","disabled","button","onClick","callback","title","CounterDisplay","dispatch","useDispatch","counter","useSelector","state","main_container","maxValue","type","INCREASE_NUMBER","RESET_NUMBER","minValue","Input","value","label","number","onChange","e","currentTarget","input","SettingsDisplay","minNum","changeMaxValue","changeMinValue","CounterSettings","min","max","useEffect","key","stateAsString","JSON","stringify","localStorage","setItem","saveState","inputValue","SET_MAX_VALUE","payload","SetMaxValueAC","SET_MIN_VALUE","SetMinValueAC","SET_VALUE","App","Boolean","window","location","hostname","match","initialState","reducers","combineReducers","action","copyState","restoreState","defaultState","getItem","parse","save","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.47d04a0f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter_wrapper\":\"Display_counter_wrapper__2b6ux\",\"simple_number\":\"Display_simple_number__3T_kI\",\"end_number\":\"Display_end_number__2GoAj\",\"error\":\"Display_error__5keDu\",\"help_message\":\"Display_help_message__1L9Cb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button_wrapper\":\"Button_button_wrapper__5jH1p\",\"button\":\"Button_button__1vtEv\",\"disabled\":\"Button_disabled__KXQmA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"number\":\"Input_number__1Z4QO\",\"input\":\"Input_input__37-So\",\"error\":\"Input_error__3zDPf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_container\":\"Counter_main_container__2lVPW index_counter_wrapper__27AU6\",\"button_wrapper\":\"Counter_button_wrapper__uflA9 index_btn_counter_wrapper__22DcX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_container\":\"CounterSettings_main_container__3hRtG index_counter_wrapper__27AU6\",\"button_wrapper\":\"CounterSettings_button_wrapper__2t_c7 index_btn_counter_wrapper__22DcX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter_wrapper\":\"SettingsDisplay_counter_wrapper__15hN1\"};","export enum ACTIONS_TYPE {\r\n    INCREASE_NUMBER = 'Counter/INCREASE_NUMBER',\r\n    RESET_NUMBER = 'Counter/RESET_NUMBER',\r\n\r\n    SET_VALUE = 'Counter/SET_VALUE',\r\n    SET_MAX_VALUE = 'Counter/SET_MAX_VALUE',\r\n    SET_MIN_VALUE = 'Counter/SET_MIN_VALUE',\r\n}\r\n\r\nexport type CounterReducersTypes = SetValue | IncreaseNumber | ResetNumber |\r\n    SetMaxValue | SetMinValue\r\n\r\n\r\n//CounterDisplay\r\nexport type IncreaseNumber = {\r\n    type: ACTIONS_TYPE.INCREASE_NUMBER\r\n}\r\nexport const IncreaseNumberAC = (): IncreaseNumber => {\r\n    return {\r\n        type: ACTIONS_TYPE.INCREASE_NUMBER,\r\n    };\r\n};\r\n\r\nexport type ResetNumber = {\r\n    type: ACTIONS_TYPE.RESET_NUMBER\r\n}\r\nexport const ResetNumberAC = (): ResetNumber => {\r\n    return {\r\n        type: ACTIONS_TYPE.RESET_NUMBER,\r\n    };\r\n};\r\n\r\n\r\n//CounterSettings\r\nexport type SetValue = {\r\n    type: ACTIONS_TYPE.SET_VALUE\r\n}\r\nexport const SetValueAC = (): SetValue => {\r\n    return {\r\n        type: ACTIONS_TYPE.SET_VALUE,\r\n    };\r\n};\r\n\r\nexport type SetMaxValue = {\r\n    type: ACTIONS_TYPE.SET_MAX_VALUE\r\n    payload: {\r\n        inputValue: number\r\n    }\r\n}\r\nexport const SetMaxValueAC = (inputValue: number): SetMaxValue => {\r\n    return {\r\n        type: ACTIONS_TYPE.SET_MAX_VALUE,\r\n        payload: {\r\n            inputValue,\r\n        },\r\n    };\r\n};\r\n\r\nexport type SetMinValue = {\r\n    type: ACTIONS_TYPE.SET_MIN_VALUE\r\n    payload: {\r\n        inputValue: number\r\n    }\r\n}\r\nexport const SetMinValueAC = (inputValue: number): SetMinValue => {\r\n    return {\r\n        type: ACTIONS_TYPE.SET_MIN_VALUE,\r\n        payload: {\r\n            inputValue,\r\n        },\r\n    };\r\n};\r\n\r\nexport type SaveSetValueToStorage = {\r\n    type: ACTIONS_TYPE.SET_MIN_VALUE\r\n    payload: {\r\n        inputValue: number\r\n    }\r\n}\r\nexport const SaveSetValueToStorageAC = (inputValue: number): SetMinValue => {\r\n    return {\r\n        type: ACTIONS_TYPE.SET_MIN_VALUE,\r\n        payload: {\r\n            inputValue,\r\n        },\r\n    };\r\n};","import React from 'react';\r\nimport s from './Display.module.css'\r\n\r\ntype DisplayPropsType = {\r\n    maxNum: number\r\n    currentValue: number\r\n    helpMessage: string\r\n}\r\n\r\nexport const Display: React.FC<DisplayPropsType> = ({maxNum, currentValue, helpMessage}) => {\r\n    const displayMessageClass = helpMessage.includes('incorrect')\r\n        ? `${s.error} ${s.simple_number}`\r\n        : `${s.help_message} ${s.simple_number}`\r\n\r\n    const spanClass = currentValue === maxNum\r\n        ? `${s.end_number} ${s.simple_number}`\r\n        : s.simple_number\r\n\r\n    return (\r\n        <div className={s.counter_wrapper}>\r\n            {helpMessage.length !== 0\r\n                ? <p className={displayMessageClass}>{helpMessage}</p>\r\n                : <span className={spanClass}>\r\n                    {currentValue}</span>\r\n            }\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Button.module.css'\r\n\r\ntype ButtonPropsType = {\r\n    callback: () => void\r\n    title: string\r\n    disabled: boolean\r\n}\r\n\r\nexport const Button: React.FC<ButtonPropsType> = (props: ButtonPropsType) => {\r\n    return (\r\n        <div className={s.button_wrapper}>\r\n            <button className={props.disabled ? `${s.disabled} ${s.button}` : s.button}\r\n                    onClick={props.callback}\r\n                    disabled={props.disabled}>\r\n                {props.title}\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Display } from './Display/Display';\r\nimport { Button } from '../common/Button/Button';\r\nimport s from './Counter.module.css'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { rootState } from '../Redux/state';\r\nimport { IncreaseNumberAC, ResetNumberAC, } from '../Redux/actions';\r\nimport { CounterInitStateType } from '../Redux/counter-reducer'\r\n\r\nexport const CounterDisplay: React.FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const counter = useSelector<rootState, CounterInitStateType>(state => state.counter)\r\n\r\n    let increaseNumber = () => dispatch(IncreaseNumberAC());\r\n    let resetNumber = () => dispatch(ResetNumberAC());\r\n\r\n    return (\r\n        <div className={s.main_container}>\r\n            <Display currentValue={counter.currentValue}\r\n                helpMessage={counter.helpMessage}\r\n                maxNum={counter.maxValue}\r\n            />\r\n            <div className={s.button_wrapper}>\r\n                <Button callback={increaseNumber}\r\n                    title={'start'}\r\n                    disabled={counter.helpMessage || counter.currentValue === counter.maxValue\r\n                        ? true\r\n                        : false} />\r\n                <Button callback={resetNumber}\r\n                    title={'reset'}\r\n                    disabled={counter.helpMessage || counter.currentValue === counter.minValue\r\n                        ? true\r\n                        : false} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport s from './Input.module.css'\r\n\r\ntype InputPropsType = {\r\n    value: number\r\n    callback: (value: number) => void\r\n    className: boolean\r\n    label: string\r\n}\r\n\r\nexport const Input: React.FC<InputPropsType> = ({value, callback, className,label}) => {\r\n    return (\r\n        <div className={s.number}>\r\n            <label>{label}\r\n                <input type=\"number\"\r\n                       value={value}\r\n                       onChange={(e) => callback(+e.currentTarget.value)}\r\n                       className={className ? `${s.error} ${s.input}` : s.input}\r\n                />\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport s from './SettingsDisplay.module.css'\r\nimport {Input} from '../../common/Input/Input';\r\n\r\ntype SettingsDisplayPropsType = {\r\n    maxNum: number\r\n    minNum: number\r\n    helpMessage: boolean\r\n    changeMaxValue: (value: number) => void\r\n    changeMinValue: (value: number) => void\r\n}\r\n\r\nexport const SettingsDisplay: React.FC<SettingsDisplayPropsType> = ({maxNum, minNum,helpMessage, changeMaxValue, changeMinValue}) => {\r\n\r\n    return (\r\n        <div className={s.counter_wrapper}>\r\n            <Input value={maxNum}\r\n                   callback={changeMaxValue}\r\n                   className={helpMessage}\r\n                   label={'max value:'}\r\n            />\r\n            <Input value={minNum}\r\n                   callback={changeMinValue}\r\n                   className={helpMessage}\r\n                   label={'min value:'}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport {SettingsDisplay} from './Display/SettingsDisplay';\r\nimport s from './CounterSettings.module.css'\r\nimport {Button} from '../common/Button/Button';\r\nimport {rootState} from '../Redux/state';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {CounterInitStateType} from '../Redux/counter-reducer'\r\nimport {SetMaxValueAC, SetMinValueAC, SetValueAC} from '../Redux/actions';\r\n\r\nexport const CounterSettings: React.FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const counter = useSelector<rootState, CounterInitStateType>(state => state.counter)\r\n\r\n    type StateType = {\r\n        min: number\r\n        max: number\r\n    }\r\n\r\n    let state: StateType = {\r\n        min: counter.minValue,\r\n        max: counter.maxValue\r\n    }\r\n\r\n    useEffect(() => {\r\n        function saveState<T>(key: string, state: T) {\r\n            const stateAsString = JSON.stringify(state);\r\n            localStorage.setItem(key, stateAsString)\r\n        }\r\n\r\n        saveState<StateType>('start value', {min: state.min, max: state.max})\r\n    }, [counter.minValue, counter.maxValue])\r\n\r\n    let setValue = () => dispatch(SetValueAC());\r\n    let setMaxValue = (inputValue: number) => dispatch(SetMaxValueAC(inputValue))\r\n    let setMinValue = (inputValue: number) => dispatch(SetMinValueAC(inputValue));\r\n\r\n    return (\r\n        <div className={s.main_container}>\r\n            <SettingsDisplay maxNum={counter.maxValue}\r\n                             minNum={counter.minValue}\r\n                             helpMessage={counter.helpMessage.includes('incorrect')}\r\n                             changeMaxValue={setMaxValue}\r\n                             changeMinValue={setMinValue}\r\n            />\r\n            <div className={s.button_wrapper}>\r\n                <Button callback={setValue}\r\n                        title={'set'}\r\n                        disabled={counter.helpMessage.length === 0\r\n                        || counter.helpMessage.includes('incorrect')}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { CounterDisplay } from './CounterTable/CounterDispaly';\r\nimport { CounterSettings } from './CounterSettings/CounterSettings';\r\n\r\nexport const App: React.FC = () => {\r\n\r\n    return (\r\n        <div className='App'>\r\n            <CounterSettings />\r\n            <CounterDisplay />\r\n        </div>\r\n    )\r\n}\r\n\r\n// const state: ValueType = restoreState<ValueType>('value', {min: 0, max: 5});\r\n    //\r\n    // let [min, setMin] = useState<number>(state.min)\r\n    // let [max, setMax] = useState<number>(state.max)\r\n    // let [currentValue, setCurrentValue] = useState<number>(min)\r\n    //\r\n    //\r\n    // let [helpMessage, setHelpMessage] = useState<string>('')\r\n    //\r\n    // function saveToStorage() {\r\n    //     saveState<ValueType>('value', {min: min, max: max});\r\n    // };\r\n    //\r\n    //\r\n    // function increaseNumber() {\r\n    //     let plusValue = currentValue +1\r\n    //     setCurrentValue(plusValue)\r\n    // }\r\n    // function resetNumber() {\r\n    //     setCurrentValue(min)\r\n    // } //completed\r\n    //\r\n    //\r\n    // function setMaxValue(value: number) {\r\n    //     setMax(value)\r\n    //     if (value <= min || min < 0) {\r\n    //         setHelpMessage('incorrect value')\r\n    //     } else {\r\n    //         setHelpMessage(`enter values and press 'set'`)\r\n    //     }\r\n    // }\r\n    // function setMinValue(value: number) {\r\n    //     setMin(value)\r\n    //     if (value < 0 || value >= max) {\r\n    //         setHelpMessage('incorrect value')\r\n    //     } else {\r\n    //         setHelpMessage(`enter values and press 'set'`)\r\n    //     }\r\n    // }\r\n    // function setValue() {\r\n    //     saveToStorage()\r\n    //     setCurrentValue(min)\r\n    //     setHelpMessage('')\r\n    // }\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {ACTIONS_TYPE, CounterReducersTypes} from './actions';\r\n\r\nexport type CounterInitStateType = {\r\n    minValue: number\r\n    maxValue: number\r\n    currentValue: number\r\n    helpMessage: string\r\n};\r\n\r\ntype ValueType = {\r\n    minValue: number\r\n    maxValue: number\r\n}\r\n\r\nexport const initialState: CounterInitStateType = {\r\n    minValue: 0,\r\n    maxValue: 5,\r\n    currentValue: 0,\r\n    helpMessage: '',\r\n};\r\n\r\nexport const counterReducer = (state: CounterInitStateType = initialState, action: CounterReducersTypes): CounterInitStateType => {\r\n    switch (action.type) {\r\n        //CounterDisplay\r\n        case ACTIONS_TYPE.RESET_NUMBER: {\r\n            return {...state, currentValue: state.minValue}\r\n        }\r\n        case ACTIONS_TYPE.INCREASE_NUMBER: {\r\n            return {...state, currentValue: state.currentValue + 1}\r\n        }\r\n        //CounterSettings\r\n        case ACTIONS_TYPE.SET_MAX_VALUE: {\r\n\r\n            let copyState = {...state}\r\n            let max = action.payload.inputValue\r\n            if (max <= copyState.minValue || copyState.minValue < 0) {\r\n                copyState.helpMessage = 'incorrect value'\r\n                copyState.maxValue = max\r\n            } else {\r\n                copyState.helpMessage = `enter values and press 'set'`\r\n                copyState.maxValue = max\r\n            }\r\n            return copyState\r\n        }\r\n        case ACTIONS_TYPE.SET_MIN_VALUE: {\r\n            let copyState = {...state}\r\n            let min = action.payload.inputValue\r\n            if (min >= copyState.maxValue || min < 0) {\r\n                copyState.helpMessage = 'incorrect value'\r\n                copyState.minValue = min\r\n            } else {\r\n                copyState.helpMessage = `enter values and press 'set'`\r\n                copyState.minValue = min\r\n            }\r\n            return copyState\r\n        }\r\n        case ACTIONS_TYPE.SET_VALUE: {\r\n            return {\r\n                ...state,\r\n                currentValue: state.currentValue = state.minValue,\r\n                helpMessage: state.helpMessage = ''\r\n            }\r\n        }\r\n        default: {\r\n\r\n            let restoreState = <T>(key: string, defaultState: T) => {\r\n                const stateAsString = localStorage.getItem(key);\r\n                if (stateAsString !== null) defaultState = JSON.parse(stateAsString) as T;\r\n                return defaultState;\r\n            }\r\n\r\n            const save = restoreState('start value', {min: state.minValue, max: state.maxValue});\r\n            return {...state, maxValue: save.max, minValue: save.min, currentValue: save.min};\r\n        }\r\n    }\r\n};\r\n","import { combineReducers, createStore } from 'redux';\r\nimport { counterReducer } from './counter-reducer';\r\n\r\nconst reducers = combineReducers({\r\n    counter: counterReducer,\r\n});\r\n\r\nexport type rootState = ReturnType<typeof reducers>;\r\n\r\nexport const store = createStore(reducers);\r\n\r\n//@ts-ignore\r\nwindow.store = store\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport {store} from './Redux/state';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n        <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}