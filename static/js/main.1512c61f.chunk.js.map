{"version":3,"sources":["CounterTable/Display/Display.module.css","common/Button/Button.module.css","common/Input/Input.module.css","CounterTable/Counter.module.css","CounterSettings/CounterSettings.module.css","CounterSettings/Display/SettingsDisplay.module.css","CounterTable/Display/Display.tsx","common/Button/Button.tsx","Redux/actions.ts","CounterTable/CounterDisplay.tsx","common/Input/Input.tsx","CounterSettings/Display/SettingsDisplay.tsx","CounterSettings/CounterSettings.tsx","App.tsx","serviceWorker.ts","Redux/counter-reducer.ts","Redux/store.ts","index.tsx"],"names":["module","exports","Display","maxNum","currentValue","helpMessage","displayMessageClass","includes","s","error","simple_number","help_message","spanClass","end_number","className","counter_wrapper","length","Button","React","memo","props","console","log","button_wrapper","disabled","button","onClick","callback","title","actions","type","inputValue","CounterDisplay","dispatch","useDispatch","counter","useSelector","state","increaseNumber","useCallback","resetNumber","main_container","maxValue","minValue","Input","value","label","number","onChange","e","currentTarget","input","SettingsDisplay","minNum","changeMaxValue","changeMinValue","CounterSettings","_useDispatch","ac","min","max","useEffect","key","stateAsString","JSON","stringify","localStorage","setItem","saveState","setValue","setMaxValue","setMinValue","App","Boolean","window","location","hostname","match","initialState","reducers","combineReducers","action","copyState","restoreState","defaultState","getItem","parse","save","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"oFACAA,EAAOC,QAAU,CAAC,gBAAkB,iCAAiC,cAAgB,+BAA+B,WAAa,4BAA4B,MAAQ,uBAAuB,aAAe,gC,iBCA3MD,EAAOC,QAAU,CAAC,eAAiB,+BAA+B,OAAS,uBAAuB,SAAW,2B,gBCA7GD,EAAOC,QAAU,CAAC,OAAS,sBAAsB,MAAQ,qBAAqB,MAAQ,uB,kBCAtFD,EAAOC,QAAU,CAAC,eAAiB,6DAA6D,eAAiB,mE,kBCAjHD,EAAOC,QAAU,CAAC,eAAiB,qEAAqE,eAAiB,2E,kBCAzHD,EAAOC,QAAU,CAAC,gBAAkB,2C,qLCQvBC,EACV,SAAC,GAAyC,IAAxCC,EAAuC,EAAvCA,OAAQC,EAA+B,EAA/BA,aAAcC,EAAiB,EAAjBA,YAEfC,EAAsBD,EAAYE,SAAS,aAArB,UACpBC,IAAEC,MADkB,YACTD,IAAEE,eADO,UAEpBF,IAAEG,aAFkB,YAEFH,IAAEE,eAEtBE,EAAYR,IAAiBD,EAAjB,UACVK,IAAEK,WADQ,YACML,IAAEE,eACrBF,IAAEE,cAEP,OACG,yBAAKI,UAAWN,IAAEO,iBACS,IAAvBV,EAAYW,OACR,uBAAGF,UAAWR,GAAsBD,GACpC,0BAAMS,UAAWF,GACbR,K,gBCHRa,EAASC,IAAMC,MAb8B,SAACC,GAExD,OADAC,QAAQC,IAAI,6BAET,yBAAKR,UAAWN,IAAEe,gBACf,4BAAQT,UAAWM,EAAMI,SAAN,UAAoBhB,IAAEgB,SAAtB,YAAkChB,IAAEiB,QAAWjB,IAAEiB,OAC5DC,QAASN,EAAMO,SACfH,SAAUJ,EAAMI,UACpBJ,EAAMQ,W,uBCXNC,EACQ,iBAAO,CAACC,KAAM,4BADtBD,EAEK,iBAAO,CAACC,KAAM,yBAFnBD,EAGE,iBAAO,CAACC,KAAM,sBAHhBD,EAIK,SAACE,GAAD,MAAyB,CAACD,KAAM,wBAAyBC,eAJ9DF,EAKK,SAACE,GAAD,MAAyB,CAACD,KAAM,wBAAyBC,eCDpE,IAAMC,EAAiBd,IAAMC,MAAK,WACtCE,QAAQC,IAAI,qCAEZ,IAAMW,EAAWC,cAEXC,EAAUC,aAAyC,SAAAC,GAAK,OAAIA,EAAMF,WAEpEG,EAAiBC,uBAAY,kBAAMN,EAASJ,OAA6B,CAACI,IAC1EO,EAAcD,uBAAY,kBAAMN,EAASJ,OAA0B,CAACI,IAExE,OACG,yBAAKnB,UAAWN,IAAEiC,gBACf,kBAAC,EAAD,CAASrC,aAAc+B,EAAQ/B,aACtBC,YAAa8B,EAAQ9B,YACrBF,OAAQgC,EAAQO,WAEzB,yBAAK5B,UAAWN,IAAEe,gBACf,kBAACN,EAAD,CAAQU,SAAUW,EACVV,MAAO,QACPJ,YAAUW,EAAQ9B,aAAe8B,EAAQ/B,eAAiB+B,EAAQO,YAG1E,kBAACzB,EAAD,CAAQU,SAAUa,EACVZ,MAAO,QACPJ,YAAUW,EAAQ9B,aAAe8B,EAAQ/B,eAAiB+B,EAAQQ,iB,iCCRzEC,EAAQ1B,IAAMC,MAfsB,SAAC,GAAyC,IAAxC0B,EAAuC,EAAvCA,MAAOlB,EAAgC,EAAhCA,SAAUb,EAAsB,EAAtBA,UAAWgC,EAAW,EAAXA,MAE7E,OADAzB,QAAQC,IAAI,4BAEV,yBAAKR,UAAWN,IAAEuC,QAChB,+BAAQD,EACN,2BAAOhB,KAAK,SACLe,MAAOA,EACPG,SAAU,SAACC,GAAD,OAAOtB,GAAUsB,EAAEC,cAAcL,QAC3C/B,UAAWA,EAAS,UAAMN,IAAEC,MAAR,YAAiBD,IAAE2C,OAAU3C,IAAE2C,aCYrDC,EAAkBlC,IAAMC,MAlBgC,SAAC,GAAkE,IAAjEhB,EAAgE,EAAhEA,OAAQkD,EAAwD,EAAxDA,OAAOhD,EAAiD,EAAjDA,YAAaiD,EAAoC,EAApCA,eAAgBC,EAAoB,EAApBA,eAE/G,OACI,yBAAKzC,UAAWN,IAAEO,iBACd,kBAAC6B,EAAD,CAAOC,MAAO1C,EACPwB,SAAU2B,EACVxC,UAAWT,EACXyC,MAAO,eAEd,kBAACF,EAAD,CAAOC,MAAOQ,EACP1B,SAAU4B,EACVzC,UAAWT,EACXyC,MAAO,mB,iBCfbU,EAAkBtC,IAAMC,MAAK,WACvCE,QAAQC,IAAI,mCAEZ,IAAMW,EJEF,WACJ,IAAMA,EAAWwB,cACjB,OAAO,SAACC,GAAD,OAAsBzB,EAASyB,IIJrBxB,GAEXC,EAAUC,aAAyC,SAAAC,GAAK,OAAIA,EAAMF,WAMpEE,EAAmB,CACpBsB,IAAKxB,EAAQQ,SACbiB,IAAKzB,EAAQO,UAGhBmB,qBAAU,YACP,SAAsBC,EAAazB,GAChC,IAAM0B,EAAgBC,KAAKC,UAAU5B,GACrC6B,aAAaC,QAAQL,EAAKC,GAG7BK,CAAqB,cAAe,CAACT,IAAKtB,EAAMsB,IAAKC,IAAKvB,EAAMuB,QAChE,CAACzB,EAAQQ,SAAUR,EAAQO,WAE9B,IAAI2B,EAAW9B,uBAAY,kBAAMN,EAASJ,OAAuB,CAACI,IAC9DqC,EAAc/B,uBAAY,SAACR,GAAD,OAAwBE,EAASJ,EAAsBE,MAAc,CAACE,IAChGsC,EAAchC,uBAAY,SAACR,GAAD,OAAwBE,EAASJ,EAAsBE,MAAc,CAACE,IAEpG,OACG,yBAAKnB,UAAWN,IAAEiC,gBACf,kBAACW,EAAD,CAAiBjD,OAAQgC,EAAQO,SAChBW,OAAQlB,EAAQQ,SAChBtC,YAAa8B,EAAQ9B,YAAYE,SAAS,aAC1C+C,eAAgBgB,EAChBf,eAAgBgB,IAEjC,yBAAKzD,UAAWN,IAAEe,gBACf,kBAACN,EAAD,CAAQU,SAAU0C,EACVzC,MAAO,MACPJ,SAAyC,IAA/BW,EAAQ9B,YAAYW,QAC3BmB,EAAQ9B,YAAYE,SAAS,oBC7CvCiE,EAAgB,WAC3B,OACE,yBAAK1D,UAAU,OACb,kBAAC0C,EAAD,MACA,kBAACxB,EAAD,QCGcyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCTOC,EAAiC,CAC3CnC,SAAU,EACVD,SAAU,EACVtC,aAAc,EACdC,YAAa,ICVV0E,EAAWC,YAAgB,CAC9B7C,QDY2B,WAAqF,IAApFE,EAAmF,uDAAzDyC,EAAcG,EAA2C,uCAC/G,OAAQA,EAAOnD,MAEZ,IAAK,uBACF,OAAO,2BAAIO,GAAX,IAAkBjC,aAAciC,EAAMM,WAEzC,IAAK,0BACF,OAAO,2BAAIN,GAAX,IAAkBjC,aAAciC,EAAMjC,aAAe,IAGxD,IAAK,wBACF,IAAI8E,EAAS,eAAO7C,GAChBuB,EAAMqB,EAAOlD,WAQjB,OAPI6B,GAAOsB,EAAUvC,UAAYuC,EAAUvC,SAAW,GACnDuC,EAAU7E,YAAc,kBACxB6E,EAAUxC,SAAWkB,IAErBsB,EAAU7E,YAAV,+BACA6E,EAAUxC,SAAWkB,GAEjBsB,EAEV,IAAK,wBACF,IAAIA,EAAS,eAAO7C,GAChBsB,EAAMsB,EAAOlD,WAQjB,OAPI4B,GAAOuB,EAAUxC,UAAYiB,EAAM,GACpCuB,EAAU7E,YAAc,kBACxB6E,EAAUvC,SAAWgB,IAErBuB,EAAU7E,YAAV,+BACA6E,EAAUvC,SAAWgB,GAEjBuB,EAEV,IAAK,oBACF,OAAO,2BACD7C,GADN,IAEGjC,aAAciC,EAAMjC,aAAeiC,EAAMM,SACzCtC,YAAagC,EAAMhC,YAAc,KAGvC,QACG,IAAI8E,EAAe,SAAIrB,EAAasB,GACjC,IAAMrB,EAAgBG,aAAamB,QAAQvB,GAE3C,OADsB,OAAlBC,IAAwBqB,EAAepB,KAAKsB,MAAMvB,IAC/CqB,GAGJG,EAAOJ,EAAa,cAAe,CAACxB,IAAKtB,EAAMM,SAAUiB,IAAKvB,EAAMK,WAC1E,OAAO,2BAAIL,GAAX,IAAkBK,SAAU6C,EAAK3B,IAAKjB,SAAU4C,EAAK5B,IAAKvD,aAAcmF,EAAK5B,UCzDzE6B,EAAQC,YAAYV,GAMjCL,OAAOc,MAAQA,ECNfE,IAASC,OACN,kBAAC,IAAMC,WAAP,KACG,kBAAC,IAAD,CAAUJ,MAAOA,GACd,kBAAC,EAAD,QAGNK,SAASC,eAAe,SH6HrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5F,GACLY,QAAQZ,MAAMA,EAAM6F,c","file":"static/js/main.1512c61f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter_wrapper\":\"Display_counter_wrapper__2b6ux\",\"simple_number\":\"Display_simple_number__3T_kI\",\"end_number\":\"Display_end_number__2GoAj\",\"error\":\"Display_error__5keDu\",\"help_message\":\"Display_help_message__1L9Cb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button_wrapper\":\"Button_button_wrapper__5jH1p\",\"button\":\"Button_button__1vtEv\",\"disabled\":\"Button_disabled__KXQmA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"number\":\"Input_number__1Z4QO\",\"input\":\"Input_input__37-So\",\"error\":\"Input_error__3zDPf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_container\":\"Counter_main_container__2lVPW index_counter_wrapper__27AU6\",\"button_wrapper\":\"Counter_button_wrapper__uflA9 index_btn_counter_wrapper__22DcX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_container\":\"CounterSettings_main_container__3hRtG index_counter_wrapper__27AU6\",\"button_wrapper\":\"CounterSettings_button_wrapper__2t_c7 index_btn_counter_wrapper__22DcX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter_wrapper\":\"SettingsDisplay_counter_wrapper__15hN1\"};","import React from 'react';\r\nimport s from './Display.module.css'\r\n\r\ntype DisplayPropsType = {\r\n   maxNum: number\r\n   currentValue: number\r\n   helpMessage: string\r\n}\r\n\r\nexport const Display: React.FC<DisplayPropsType> =\r\n   ({maxNum, currentValue, helpMessage}) => {\r\n\r\n      const displayMessageClass = helpMessage.includes('incorrect')\r\n         ? `${s.error} ${s.simple_number}`\r\n         : `${s.help_message} ${s.simple_number}`\r\n\r\n      const spanClass = currentValue === maxNum\r\n         ? `${s.end_number} ${s.simple_number}`\r\n         : s.simple_number\r\n\r\n      return (\r\n         <div className={s.counter_wrapper}>\r\n            {helpMessage.length !== 0\r\n               ? <p className={displayMessageClass}>{helpMessage}</p>\r\n               : <span className={spanClass}>\r\n                    {currentValue}</span>\r\n            }\r\n         </div>\r\n      )\r\n   }","import React from 'react';\r\nimport s from './Button.module.css'\r\n\r\ntype ButtonPropsType = {\r\n   callback: () => void\r\n   title: string\r\n   disabled: boolean\r\n}\r\n\r\nexport const ButtonComponent: React.FC<ButtonPropsType> = (props: ButtonPropsType) => {\r\n   console.log('Button Component rerender')\r\n   return (\r\n      <div className={s.button_wrapper}>\r\n         <button className={props.disabled ? `${s.disabled} ${s.button}` : s.button}\r\n                 onClick={props.callback}\r\n                 disabled={props.disabled}>\r\n            {props.title}\r\n         </button>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport const Button = React.memo(ButtonComponent)\r\n\r\n","import {useDispatch as _useDispatch} from 'react-redux';\r\nimport {InferActionsTypes} from './store';\r\n\r\nexport type ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\nexport const actions = {\r\n   IncreaseNumberAC: () => ({type: 'COUNTER/INCREASE_NUMBER'} as const),\r\n   ResetNumberAC: () => ({type: 'COUNTER/RESET_NUMBER'} as const),\r\n   SetValueAC: () => ({type: 'COUNTER/SET_VALUE'} as const),\r\n   SetMaxValueAC: (inputValue: number) => ({type: 'COUNTER/SET_MAX_VALUE', inputValue} as const),\r\n   SetMinValueAC: (inputValue: number) => ({type: 'COUNTER/SET_MIN_VALUE', inputValue} as const),\r\n   SaveSetValueToStorageAC: (inputValue: number) => ({type: 'COUNTER/SET_MIN_VALUE', inputValue} as const)\r\n}\r\n\r\nexport function useDispatch() {\r\n   const dispatch = _useDispatch();\r\n   return (ac: ActionsTypes) => dispatch(ac)\r\n}","import React, {useCallback} from 'react';\r\nimport {Display} from './Display/Display';\r\nimport {Button} from '../common/Button/Button';\r\nimport s from './Counter.module.css'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {rootState} from '../Redux/store';\r\nimport {actions,} from '../Redux/actions';\r\nimport {InitialStateType} from '../Redux/counter-reducer'\r\n\r\nexport const CounterDisplay = React.memo(() => {\r\n   console.log('Counter DisplayComponent rerender')\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const counter = useSelector<rootState, InitialStateType>(state => state.counter)\r\n\r\n   let increaseNumber = useCallback(() => dispatch(actions.IncreaseNumberAC()), [dispatch]);\r\n   let resetNumber = useCallback(() => dispatch(actions.ResetNumberAC()), [dispatch]);\r\n\r\n   return (\r\n      <div className={s.main_container}>\r\n         <Display currentValue={counter.currentValue}\r\n                  helpMessage={counter.helpMessage}\r\n                  maxNum={counter.maxValue}\r\n         />\r\n         <div className={s.button_wrapper}>\r\n            <Button callback={increaseNumber}\r\n                    title={'start'}\r\n                    disabled={counter.helpMessage || counter.currentValue === counter.maxValue\r\n                       ? true\r\n                       : false}/>\r\n            <Button callback={resetNumber}\r\n                    title={'reset'}\r\n                    disabled={counter.helpMessage || counter.currentValue === counter.minValue\r\n                       ? true\r\n                       : false}/>\r\n         </div>\r\n      </div>\r\n   )\r\n})\r\n\r\n\r\n","import React from 'react';\r\nimport s from './Input.module.css'\r\n\r\ntype InputPropsType = {\r\n  value: number\r\n  callback: (value: number) => void\r\n  className: boolean\r\n  label: string\r\n}\r\n\r\nconst InputComponent: React.FC<InputPropsType> = ({value, callback, className, label}) => {\r\n  console.log('Input Component rerender')\r\n  return (\r\n    <div className={s.number}>\r\n      <label>{label}\r\n        <input type=\"number\"\r\n               value={value}\r\n               onChange={(e) => callback(+e.currentTarget.value)}\r\n               className={className ? `${s.error} ${s.input}` : s.input}\r\n        />\r\n      </label>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const Input = React.memo(InputComponent)\r\n","import React from 'react';\r\nimport s from './SettingsDisplay.module.css'\r\nimport {Input} from '../../common/Input/Input';\r\n\r\ntype SettingsDisplayPropsType = {\r\n    maxNum: number\r\n    minNum: number\r\n    helpMessage: boolean\r\n    changeMaxValue: (value: number) => void\r\n    changeMinValue: (value: number) => void\r\n}\r\n\r\nconst SettingsDisplayComponent: React.FC<SettingsDisplayPropsType> = ({maxNum, minNum,helpMessage, changeMaxValue, changeMinValue}) => {\r\n\r\n    return (\r\n        <div className={s.counter_wrapper}>\r\n            <Input value={maxNum}\r\n                   callback={changeMaxValue}\r\n                   className={helpMessage}\r\n                   label={'max value:'}\r\n            />\r\n            <Input value={minNum}\r\n                   callback={changeMinValue}\r\n                   className={helpMessage}\r\n                   label={'min value:'}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const SettingsDisplay = React.memo(SettingsDisplayComponent)\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {SettingsDisplay} from './Display/SettingsDisplay';\r\nimport s from './CounterSettings.module.css'\r\nimport {Button} from '../common/Button/Button';\r\nimport {rootState} from '../Redux/store';\r\nimport {useSelector} from 'react-redux';\r\nimport {InitialStateType} from '../Redux/counter-reducer'\r\nimport {actions, useDispatch} from '../Redux/actions';\r\n\r\nexport const CounterSettings = React.memo(() => {\r\n   console.log('Counter Configurations rerender')\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const counter = useSelector<rootState, InitialStateType>(state => state.counter)\r\n\r\n   type StateType = {\r\n      min: number\r\n      max: number\r\n   }\r\n   let state: StateType = {\r\n      min: counter.minValue,\r\n      max: counter.maxValue\r\n   }\r\n\r\n   useEffect(() => {\r\n      function saveState<T>(key: string, state: T) {\r\n         const stateAsString = JSON.stringify(state);\r\n         localStorage.setItem(key, stateAsString)\r\n      }\r\n\r\n      saveState<StateType>('start value', {min: state.min, max: state.max})\r\n   }, [counter.minValue, counter.maxValue])\r\n\r\n   let setValue = useCallback(() => dispatch(actions.SetValueAC()), [dispatch]);\r\n   let setMaxValue = useCallback((inputValue: number) => dispatch(actions.SetMaxValueAC(inputValue)), [dispatch]);\r\n   let setMinValue = useCallback((inputValue: number) => dispatch(actions.SetMinValueAC(inputValue)), [dispatch]);\r\n\r\n   return (\r\n      <div className={s.main_container}>\r\n         <SettingsDisplay maxNum={counter.maxValue}\r\n                          minNum={counter.minValue}\r\n                          helpMessage={counter.helpMessage.includes('incorrect')}\r\n                          changeMaxValue={setMaxValue}\r\n                          changeMinValue={setMinValue}\r\n         />\r\n         <div className={s.button_wrapper}>\r\n            <Button callback={setValue}\r\n                    title={'set'}\r\n                    disabled={counter.helpMessage.length === 0\r\n                    || counter.helpMessage.includes('incorrect')}\r\n            />\r\n         </div>\r\n      </div>\r\n   )\r\n})\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {CounterDisplay} from './CounterTable/CounterDisplay';\r\nimport {CounterSettings} from './CounterSettings/CounterSettings';\r\n\r\nexport const App: React.FC = () => {\r\n  return (\r\n    <div className='App'>\r\n      <CounterSettings/>\r\n      <CounterDisplay/>\r\n    </div>\r\n  )\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {ActionsTypes} from './actions';\r\n\r\nexport type InitialStateType = {\r\n   minValue: number\r\n   maxValue: number\r\n   currentValue: number\r\n   helpMessage: string\r\n};\r\n\r\nexport const initialState: InitialStateType = {\r\n   minValue: 0,\r\n   maxValue: 5,\r\n   currentValue: 0,\r\n   helpMessage: '',\r\n};\r\n\r\nexport const counterReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n   switch (action.type) {\r\n      //CounterDisplay\r\n      case 'COUNTER/RESET_NUMBER': {\r\n         return {...state, currentValue: state.minValue}\r\n      }\r\n      case 'COUNTER/INCREASE_NUMBER': {\r\n         return {...state, currentValue: state.currentValue + 1}\r\n      }\r\n      //CounterSettings\r\n      case 'COUNTER/SET_MAX_VALUE': {\r\n         let copyState = {...state}\r\n         let max = action.inputValue\r\n         if (max <= copyState.minValue || copyState.minValue < 0) {\r\n            copyState.helpMessage = 'incorrect value'\r\n            copyState.maxValue = max\r\n         } else {\r\n            copyState.helpMessage = `enter values and press 'set'`\r\n            copyState.maxValue = max\r\n         }\r\n         return copyState\r\n      }\r\n      case 'COUNTER/SET_MIN_VALUE': {\r\n         let copyState = {...state}\r\n         let min = action.inputValue\r\n         if (min >= copyState.maxValue || min < 0) {\r\n            copyState.helpMessage = 'incorrect value'\r\n            copyState.minValue = min\r\n         } else {\r\n            copyState.helpMessage = `enter values and press 'set'`\r\n            copyState.minValue = min\r\n         }\r\n         return copyState\r\n      }\r\n      case 'COUNTER/SET_VALUE': {\r\n         return {\r\n            ...state,\r\n            currentValue: state.currentValue = state.minValue,\r\n            helpMessage: state.helpMessage = ''\r\n         }\r\n      }\r\n      default: {\r\n         let restoreState = <T>(key: string, defaultState: T) => {\r\n            const stateAsString = localStorage.getItem(key);\r\n            if (stateAsString !== null) defaultState = JSON.parse(stateAsString) as T;\r\n            return defaultState;\r\n         }\r\n\r\n         const save = restoreState('start value', {min: state.minValue, max: state.maxValue});\r\n         return {...state, maxValue: save.max, minValue: save.min, currentValue: save.min};\r\n      }\r\n   }\r\n};\r\n","import {combineReducers, createStore} from 'redux';\r\nimport {counterReducer} from './counter-reducer';\r\n\r\nconst reducers = combineReducers({\r\n   counter: counterReducer,\r\n});\r\n\r\nexport type rootState = ReturnType<typeof reducers>;\r\nexport const store = createStore(reducers);\r\n\r\ntype PropertiesTypes<T> = T extends { [key: string]: infer U } ? U : never\r\nexport type InferActionsTypes<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertiesTypes<T>>\r\n\r\n//@ts-ignore\r\nwindow.store = store\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport {store} from './Redux/store';\n\nReactDOM.render(\n   <React.StrictMode>\n      <Provider store={store}>\n         <App/>\n      </Provider>\n   </React.StrictMode>,\n   document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}