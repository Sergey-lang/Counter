{"version":3,"sources":["CounterTable/Display/Display.module.css","common/Button/Button.module.css","common/Input/Input.module.css","CounterTable/Counter.module.css","CounterSettings/CounterSettings.module.css","CounterSettings/Display/SettingsDisplay.module.css","Redux/actions.ts","CounterTable/Display/Display.tsx","common/Button/Button.tsx","CounterTable/Counter.tsx","common/Input/Input.tsx","CounterSettings/Display/SettingsDisplay.tsx","CounterSettings/CounterSettings.tsx","App.tsx","serviceWorker.ts","Redux/counter-reducer.ts","Redux/state.ts","index.tsx"],"names":["module","exports","ACTIONS_TYPE","Display","maxNum","currentValue","helpMessage","displayMessageClass","includes","s","error","simple_number","help_message","spanClass","end_number","className","counter_wrapper","length","Button","props","button_wrapper","disabled","button","onClick","callback","title","CounterContainer","connect","state","minValue","counter","maxValue","dispatch","increaseNumber","type","INCREASE_NUMBER","resetNumber","RESET_NUMBER","main_container","Input","value","label","number","onChange","e","currentTarget","input","SettingsDisplay","minNum","changeMaxValue","changeMinValue","CounterSettingContainer","setValue","SET_VALUE","setMaxValue","inputValue","SET_MAX_VALUE","payload","SetMaxValueAC","setMinValue","SET_MIN_VALUE","SetMinValueAC","App","Boolean","window","location","hostname","match","initialState","reducers","combineReducers","action","copyState","max","min","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.3fd6d149.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter_wrapper\":\"Display_counter_wrapper__2b6ux\",\"simple_number\":\"Display_simple_number__3T_kI\",\"end_number\":\"Display_end_number__2GoAj\",\"error\":\"Display_error__5keDu\",\"help_message\":\"Display_help_message__1L9Cb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button_wrapper\":\"Button_button_wrapper__5jH1p\",\"button\":\"Button_button__1vtEv\",\"disabled\":\"Button_disabled__KXQmA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"number\":\"Input_number__1Z4QO\",\"input\":\"Input_input__37-So\",\"error\":\"Input_error__3zDPf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_container\":\"Counter_main_container__2lVPW index_counter_wrapper__27AU6\",\"button_wrapper\":\"Counter_button_wrapper__uflA9 index_btn_counter_wrapper__22DcX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_container\":\"CounterSettings_main_container__3hRtG index_counter_wrapper__27AU6\",\"button_wrapper\":\"CounterSettings_button_wrapper__2t_c7 index_btn_counter_wrapper__22DcX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter_wrapper\":\"SettingsDisplay_counter_wrapper__15hN1\"};","export enum ACTIONS_TYPE {\r\n    INCREASE_NUMBER = 'Counter/INCREASE_NUMBER',\r\n    RESET_NUMBER = 'Counter/RESET_NUMBER',\r\n\r\n    SET_VALUE = 'Counter/SET_VALUE',\r\n    SET_MAX_VALUE = 'Counter/SET_MAX_VALUE',\r\n    SET_MIN_VALUE = 'Counter/SET_MIN_VALUE',\r\n}\r\n\r\nexport type CounterReducersTypes = SetValue | IncreaseNumber | ResetNumber |\r\n    SetMaxValue | SetMinValue\r\n\r\n\r\n//CounterDisplay\r\nexport type IncreaseNumber = {\r\n    type: ACTIONS_TYPE.INCREASE_NUMBER\r\n}\r\nexport const IncreaseNumberAC = (): IncreaseNumber => {\r\n    return {\r\n        type: ACTIONS_TYPE.INCREASE_NUMBER,\r\n    };\r\n};\r\n\r\nexport type ResetNumber = {\r\n    type: ACTIONS_TYPE.RESET_NUMBER\r\n}\r\nexport const ResetNumberAC = (): ResetNumber => {\r\n    return {\r\n        type: ACTIONS_TYPE.RESET_NUMBER,\r\n    };\r\n};\r\n\r\n\r\n//CounterSettings\r\nexport type SetValue = {\r\n    type: ACTIONS_TYPE.SET_VALUE\r\n}\r\nexport const SetValueAC = (): SetValue => {\r\n    return {\r\n        type: ACTIONS_TYPE.SET_VALUE,\r\n    };\r\n};\r\n\r\nexport type SetMaxValue = {\r\n    type: ACTIONS_TYPE.SET_MAX_VALUE\r\n    payload: {\r\n        inputValue: number\r\n    }\r\n}\r\nexport const SetMaxValueAC = (inputValue: number): SetMaxValue => {\r\n    return {\r\n        type: ACTIONS_TYPE.SET_MAX_VALUE,\r\n        payload: {\r\n            inputValue,\r\n        },\r\n    };\r\n};\r\n\r\nexport type SetMinValue = {\r\n    type: ACTIONS_TYPE.SET_MIN_VALUE\r\n    payload: {\r\n        inputValue: number\r\n    }\r\n}\r\nexport const SetMinValueAC = (inputValue: number): SetMinValue => {\r\n    return {\r\n        type: ACTIONS_TYPE.SET_MIN_VALUE,\r\n        payload: {\r\n            inputValue,\r\n        },\r\n    };\r\n};\r\n\r\nexport type SaveSetValueToStorage = {\r\n    type: ACTIONS_TYPE.SET_MIN_VALUE\r\n    payload: {\r\n        inputValue: number\r\n    }\r\n}\r\nexport const SaveSetValueToStorageAC = (inputValue: number): SetMinValue => {\r\n    return {\r\n        type: ACTIONS_TYPE.SET_MIN_VALUE,\r\n        payload: {\r\n            inputValue,\r\n        },\r\n    };\r\n};","import React from 'react';\r\nimport s from './Display.module.css'\r\n\r\ntype DisplayPropsType = {\r\n    maxNum: number\r\n    currentValue: number\r\n    helpMessage: string\r\n}\r\n\r\nexport const Display: React.FC<DisplayPropsType> = ({maxNum, currentValue, helpMessage}) => {\r\n    const displayMessageClass = helpMessage.includes('incorrect')\r\n        ? `${s.error} ${s.simple_number}`\r\n        : `${s.help_message} ${s.simple_number}`\r\n\r\n    const spanClass = currentValue === maxNum\r\n        ? `${s.end_number} ${s.simple_number}`\r\n        : s.simple_number\r\n\r\n    return (\r\n        <div className={s.counter_wrapper}>\r\n            {helpMessage.length !== 0\r\n                ? <p className={displayMessageClass}>{helpMessage}</p>\r\n                : <span className={spanClass}>\r\n                    {currentValue}</span>\r\n            }\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Button.module.css'\r\n\r\ntype ButtonPropsType = {\r\n    callback: () => void\r\n    title: string\r\n    disabled: boolean\r\n}\r\n\r\nexport const Button: React.FC<ButtonPropsType> = (props: ButtonPropsType) => {\r\n    return (\r\n        <div className={s.button_wrapper}>\r\n            <button className={props.disabled ? `${s.disabled} ${s.button}` : s.button}\r\n                    onClick={props.callback}\r\n                    disabled={props.disabled}>\r\n                {props.title}\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {Display} from './Display/Display';\r\nimport {Button} from '../common/Button/Button';\r\nimport s from './Counter.module.css'\r\nimport {connect} from 'react-redux';\r\nimport {IGlobalState} from '../Redux/state';\r\nimport {Dispatch} from 'redux';\r\nimport {CounterReducersTypes, IncreaseNumberAC, ResetNumberAC,} from '../Redux/actions';\r\n\r\n\r\ntype PropsType = MapStateType & MapDispatchType\r\nexport const Counter: React.FC<PropsType> = ({minValue, maxValue, helpMessage, currentValue, resetNumber, increaseNumber}) => {\r\n\r\n    return (\r\n        <div className={s.main_container}>\r\n            <Display currentValue={currentValue}\r\n                     helpMessage={helpMessage}\r\n                     maxNum={maxValue}\r\n            />\r\n            <div className={s.button_wrapper}>\r\n                <Button callback={increaseNumber}\r\n                        title={'start'}\r\n                        disabled={helpMessage || currentValue === maxValue ? true : false}/>\r\n                <Button callback={resetNumber}\r\n                        title={'reset'}\r\n                        disabled={helpMessage || currentValue === minValue ? true : false}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype MapStateType = {\r\n    minValue: number\r\n    maxValue: number\r\n    helpMessage: string\r\n    currentValue: number\r\n}\r\n\r\ntype MapDispatchType = {\r\n    increaseNumber: () => void\r\n    resetNumber: () => void\r\n}\r\n\r\nconst mapStateToProps = (state: IGlobalState): MapStateType => {\r\n    return {\r\n        minValue: state.counter.minValue,\r\n        maxValue: state.counter.maxValue,\r\n        helpMessage: state.counter.helpMessage,\r\n        currentValue: state.counter.currentValue\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<CounterReducersTypes>):MapDispatchType => {\r\n    return {\r\n        increaseNumber() {\r\n            dispatch(IncreaseNumberAC());\r\n        },\r\n        resetNumber() {\r\n            dispatch(ResetNumberAC());\r\n        },\r\n    };\r\n};\r\n\r\nexport const CounterContainer = connect<MapStateType, MapDispatchType, {}, IGlobalState>(mapStateToProps, mapDispatchToProps)(Counter);\r\n\r\n\r\n","import React from 'react';\r\nimport s from './Input.module.css'\r\n\r\ntype InputPropsType = {\r\n    value: number\r\n    callback: (value: number) => void\r\n    className: boolean\r\n    label: string\r\n}\r\n\r\nexport const Input: React.FC<InputPropsType> = ({value, callback, className,label}) => {\r\n    return (\r\n        <div className={s.number}>\r\n            <label>{label}\r\n                <input type=\"number\"\r\n                       value={value}\r\n                       onChange={(e) => callback(+e.currentTarget.value)}\r\n                       className={className ? `${s.error} ${s.input}` : s.input}\r\n                />\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport s from './SettingsDisplay.module.css'\r\nimport {Input} from '../../common/Input/Input';\r\n\r\ntype SettingsDisplayPropsType = {\r\n    maxNum: number\r\n    minNum: number\r\n    helpMessage: boolean\r\n    changeMaxValue: (value: number) => void\r\n    changeMinValue: (value: number) => void\r\n}\r\n\r\nexport const SettingsDisplay: React.FC<SettingsDisplayPropsType> = ({maxNum, minNum,helpMessage, changeMaxValue, changeMinValue}) => {\r\n\r\n    return (\r\n        <div className={s.counter_wrapper}>\r\n            <Input value={maxNum}\r\n                   callback={changeMaxValue}\r\n                   className={helpMessage}\r\n                   label={'max value:'}\r\n            />\r\n            <Input value={minNum}\r\n                   callback={changeMinValue}\r\n                   className={helpMessage}\r\n                   label={'min value:'}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {SettingsDisplay} from './Display/SettingsDisplay';\r\nimport s from './CounterSettings.module.css'\r\nimport {Button} from '../common/Button/Button';\r\nimport {IGlobalState} from '../Redux/state';\r\nimport {Dispatch} from 'redux';\r\nimport {CounterReducersTypes, SetMaxValueAC, SetMinValueAC, SetValueAC} from '../Redux/actions';\r\nimport {connect} from 'react-redux';\r\n\r\n\r\ntype PropsType = MapDispatchType & MapStateType\r\nexport const CounterSettings: React.FC<PropsType> = ({setValue, setMaxValue, setMinValue, minValue, maxValue, helpMessage}) => {\r\n\r\n    return (\r\n        <div className={s.main_container}>\r\n            <SettingsDisplay maxNum={maxValue}\r\n                             minNum={minValue}\r\n                             helpMessage={helpMessage.includes('incorrect')}\r\n                             changeMaxValue={setMaxValue}\r\n                             changeMinValue={setMinValue}\r\n            />\r\n            <div className={s.button_wrapper}>\r\n                <Button callback={setValue}\r\n                        title={'set'}\r\n                        disabled={helpMessage.length === 0}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype MapStateType = {\r\n    minValue: number\r\n    maxValue: number,\r\n    helpMessage: string,\r\n}\r\n\r\ntype MapDispatchType = {\r\n    setValue: () => void\r\n    setMaxValue: (inputValue: number) => void\r\n    setMinValue: (inputValue: number) => void\r\n}\r\n\r\nconst mapStateToProps = (state: IGlobalState): MapStateType => {\r\n    return {\r\n        minValue: state.counter.minValue,\r\n        maxValue: state.counter.maxValue,\r\n        helpMessage: state.counter.helpMessage,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<CounterReducersTypes>): MapDispatchType => {\r\n    return {\r\n        setValue() {\r\n            dispatch(SetValueAC());\r\n        },\r\n        setMaxValue(inputValue: number) {\r\n            dispatch(SetMaxValueAC(inputValue));\r\n        },\r\n        setMinValue(inputValue: number) {\r\n            dispatch(SetMinValueAC(inputValue));\r\n        },\r\n    };\r\n};\r\n\r\nexport const CounterSettingContainer = connect<MapStateType, MapDispatchType, {}, IGlobalState>(mapStateToProps, mapDispatchToProps)(CounterSettings);\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {CounterContainer} from './CounterTable/Counter';\r\nimport {CounterSettingContainer} from './CounterSettings/CounterSettings';\r\n\r\ntype ValueType = {\r\n    min: number\r\n    max: number\r\n}\r\n\r\nexport const App: React.FC = () => {\r\n\r\n    // const state: ValueType = restoreState<ValueType>('value', {min: 0, max: 5});\r\n    //\r\n    // let [min, setMin] = useState<number>(state.min)\r\n    // let [max, setMax] = useState<number>(state.max)\r\n    // let [currentValue, setCurrentValue] = useState<number>(min)\r\n    //\r\n    //\r\n    // let [helpMessage, setHelpMessage] = useState<string>('')\r\n    //\r\n    // function saveToStorage() {\r\n    //     saveState<ValueType>('value', {min: min, max: max});\r\n    // };\r\n    //\r\n    //\r\n    // function increaseNumber() {\r\n    //     let plusValue = currentValue +1\r\n    //     setCurrentValue(plusValue)\r\n    // }\r\n    // function resetNumber() {\r\n    //     setCurrentValue(min)\r\n    // } //completed\r\n    //\r\n    //\r\n    // function setMaxValue(value: number) {\r\n    //     setMax(value)\r\n    //     if (value <= min || min < 0) {\r\n    //         setHelpMessage('incorrect value')\r\n    //     } else {\r\n    //         setHelpMessage(`enter values and press 'set'`)\r\n    //     }\r\n    // }\r\n    // function setMinValue(value: number) {\r\n    //     setMin(value)\r\n    //     if (value < 0 || value >= max) {\r\n    //         setHelpMessage('incorrect value')\r\n    //     } else {\r\n    //         setHelpMessage(`enter values and press 'set'`)\r\n    //     }\r\n    // }\r\n    // function setValue() {\r\n    //     saveToStorage()\r\n    //     setCurrentValue(min)\r\n    //     setHelpMessage('')\r\n    // }\r\n\r\n    return (\r\n        <div className='App'>\r\n            <CounterSettingContainer/>\r\n            <CounterContainer/>\r\n        </div>\r\n    )\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ACTIONS_TYPE, CounterReducersTypes } from './actions';\r\n\r\nexport type CounterInitStateType = {\r\n    minValue: number\r\n    maxValue: number\r\n    currentValue: number\r\n    helpMessage: string\r\n};\r\n\r\nconst initialState: CounterInitStateType = {\r\n    minValue: 0,\r\n    maxValue: 5,\r\n    currentValue: 0,\r\n    helpMessage: '',\r\n};\r\n\r\nexport const counterReducer = (state: CounterInitStateType = initialState, action: CounterReducersTypes): CounterInitStateType => {\r\n    switch (action.type) {\r\n        //CounterDisplay\r\n        case ACTIONS_TYPE.RESET_NUMBER: {\r\n            return { ...state, currentValue: state.minValue }\r\n        }\r\n        case ACTIONS_TYPE.INCREASE_NUMBER: {\r\n            return { ...state, currentValue: state.currentValue + 1 }\r\n        }\r\n        //CounterSettings\r\n        case ACTIONS_TYPE.SET_MAX_VALUE: {\r\n            let copyState = { ...state } //get copy\r\n            let max = action.payload.inputValue  //get input value from action\r\n            if (max <= copyState.minValue || copyState.minValue < 0) {\r\n                copyState.helpMessage = 'incorrect value'\r\n                copyState.maxValue = max\r\n            } else {\r\n                copyState.helpMessage = `enter values and press 'set'`\r\n                copyState.maxValue = max\r\n            }\r\n            return copyState\r\n        }\r\n        case ACTIONS_TYPE.SET_MIN_VALUE: {\r\n            let copyState = { ...state } //get copy\r\n            let min = action.payload.inputValue //get input value from action\r\n            if (min >= copyState.maxValue || min < 0) {\r\n                copyState.helpMessage = 'incorrect value'\r\n                copyState.minValue = min\r\n            } else {\r\n                copyState.helpMessage = `enter values and press 'set'`\r\n                copyState.minValue = min\r\n            }\r\n            return copyState\r\n        }\r\n        case ACTIONS_TYPE.SET_VALUE: {\r\n            return {\r\n                ...state,\r\n                currentValue: state.currentValue = state.minValue,\r\n                helpMessage: state.helpMessage = ''\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import {combineReducers, createStore} from 'redux';\r\nimport {counterReducer} from './counter-reducer';\r\n\r\nconst reducers = combineReducers({\r\n    counter: counterReducer,\r\n});\r\nexport type IGlobalState = ReturnType<typeof reducers>;\r\n\r\nexport const store = createStore(reducers);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport {store} from './Redux/state';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n        <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}