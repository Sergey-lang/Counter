{"version":3,"sources":["CounterTable/Display/Display.module.css","common/Button/Button.module.css","common/Input/Input.module.css","CounterTable/Counter.module.css","CounterSettings/CounterSettings.module.css","CounterSettings/Display/SettingsDisplay.module.css","CounterTable/Display/Display.tsx","common/Button/Button.tsx","CounterTable/Counter.tsx","common/Input/Input.tsx","CounterSettings/Display/SettingsDisplay.tsx","CounterSettings/CounterSettings.tsx","App.tsx","common/localStorage.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Display","maxNum","currentValue","helpMessage","displayMessageClass","includes","s","error","simple_number","help_message","spanClass","end_number","className","counter_wrapper","length","Button","props","button_wrapper","disabled","button","onClick","callback","title","Counter","minNum","resetNumberCallback","increaseNumberCallback","main_container","Input","value","label","number","type","onChange","e","currentTarget","input","SettingsDisplay","changeMaxValue","changeMinValue","CounterSettings","setValue","App","state","key","defaultState","stateAsString","localStorage","getItem","JSON","parse","restoreState","min","max","useState","setMin","setMax","setCurrentValue","setHelpMessage","saveToStorage","stringify","setItem","saveState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"kFACAA,EAAOC,QAAU,CAAC,gBAAkB,iCAAiC,cAAgB,+BAA+B,WAAa,4BAA4B,MAAQ,uBAAuB,aAAe,gC,gBCA3MD,EAAOC,QAAU,CAAC,eAAiB,+BAA+B,OAAS,uBAAuB,SAAW,2B,gBCA7GD,EAAOC,QAAU,CAAC,OAAS,sBAAsB,MAAQ,qBAAqB,MAAQ,uB,iBCAtFD,EAAOC,QAAU,CAAC,eAAiB,6DAA6D,eAAiB,mE,gBCAjHD,EAAOC,QAAU,CAAC,eAAiB,qEAAqE,eAAiB,2E,kBCAzHD,EAAOC,QAAU,CAAC,gBAAkB,2C,wLCQvBC,EAAsC,SAAC,GAAyC,IAAxCC,EAAuC,EAAvCA,OAAQC,EAA+B,EAA/BA,aAAcC,EAAiB,EAAjBA,YACjEC,EAAsBD,EAAYE,SAAS,aAArB,UACnBC,IAAEC,MADiB,YACRD,IAAEE,eADM,UAEnBF,IAAEG,aAFiB,YAEDH,IAAEE,eAEvBE,EAAYR,IAAiBD,EAAjB,UACTK,IAAEK,WADO,YACOL,IAAEE,eACrBF,IAAEE,cAER,OACI,yBAAKI,UAAWN,IAAEO,iBACU,IAAvBV,EAAYW,OACP,uBAAGF,UAAWR,GAAsBD,GACpC,0BAAMS,UAAWF,GACdR,K,gBCdRa,EAAoC,SAACC,GAC9C,OACI,yBAAKJ,UAAWN,IAAEW,gBACd,4BAAQL,UAAWI,EAAME,SAAN,UAAoBZ,IAAEY,SAAtB,YAAkCZ,IAAEa,QAAWb,IAAEa,OAC5DC,QAASJ,EAAMK,SACfH,SAAUF,EAAME,UACnBF,EAAMM,S,gBCDVC,EAAsC,SAAC,GAA8F,IAA7FC,EAA4F,EAA5FA,OAAQvB,EAAoF,EAApFA,OAAQE,EAA4E,EAA5EA,YAAaD,EAA+D,EAA/DA,aAAcuB,EAAiD,EAAjDA,oBAAqBC,EAA4B,EAA5BA,uBAEjH,OACI,yBAAKd,UAAWN,IAAEqB,gBACd,kBAAC,EAAD,CAASzB,aAAcA,EACdC,YAAaA,EACbF,OAAQA,IAEjB,yBAAKW,UAAWN,IAAEW,gBACd,kBAAC,EAAD,CAAQI,SAAUK,EACVJ,MAAO,QACPJ,YAAUf,GAAeD,IAAiBD,KAClD,kBAAC,EAAD,CAAQoB,SAAUI,EACVH,MAAO,QACPJ,YAAUf,GAAeD,IAAiBsB,Q,gCClBrDI,EAAkC,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,MAAOR,EAA+B,EAA/BA,SAAUT,EAAqB,EAArBA,UAAUkB,EAAW,EAAXA,MACxE,OACI,yBAAKlB,UAAWN,IAAEyB,QACd,+BAAQD,EACJ,2BAAOE,KAAK,SACLH,MAAOA,EACPI,SAAU,SAACC,GAAD,OAAOb,GAAUa,EAAEC,cAAcN,QAC3CjB,UAAWA,EAAS,UAAMN,IAAEC,MAAR,YAAiBD,IAAE8B,OAAU9B,IAAE8B,WCL7DC,EAAsD,SAAC,GAAkE,IAAjEpC,EAAgE,EAAhEA,OAAQuB,EAAwD,EAAxDA,OAAOrB,EAAiD,EAAjDA,YAAamC,EAAoC,EAApCA,eAAgBC,EAAoB,EAApBA,eAE7G,OACI,yBAAK3B,UAAWN,IAAEO,iBACd,kBAAC,EAAD,CAAOgB,MAAO5B,EACPoB,SAAUiB,EACV1B,UAAWT,EACX2B,MAAO,eAEd,kBAAC,EAAD,CAAOD,MAAOL,EACPH,SAAUkB,EACV3B,UAAWT,EACX2B,MAAO,iB,gBCVbU,EAA8C,SAACxB,GAExD,OACI,yBAAKJ,UAAWN,IAAEqB,gBACd,kBAAC,EAAD,CAAiB1B,OAAQe,EAAMf,OACduB,OAAQR,EAAMQ,OACdrB,YAAaa,EAAMb,YACnBmC,eAAgBtB,EAAMsB,eACtBC,eAAgBvB,EAAMuB,iBAEvC,yBAAK3B,UAAWN,IAAEW,gBACd,kBAAC,EAAD,CAAQI,SAAUL,EAAMyB,SAChBnB,MAAO,MACPJ,SAAUF,EAAMb,iBCmDzBuC,MAnEf,WAEI,IAAMC,ECRH,SAAyBC,EAAaC,GACzC,IAAMC,EAAgBC,aAAaC,QAAQJ,GAE3C,OADsB,OAAlBE,IAAwBD,EAAeI,KAAKC,MAAMJ,IAC/CD,EDKkBM,CAAwB,QAAS,CAACC,IAAK,EAAGC,IAAK,IAF7D,EAISC,mBAAiBX,EAAMS,KAJhC,mBAINA,EAJM,KAIDG,EAJC,OAKSD,mBAAiBX,EAAMU,KALhC,mBAKNA,EALM,KAKDG,EALC,OAM2BF,mBAAiBF,GAN5C,mBAMNlD,EANM,KAMQuD,EANR,OASyBH,mBAAiB,IAT1C,mBASNnD,EATM,KASOuD,EATP,KAWX,SAASC,KCtBN,SAAsBf,EAAaD,GACtC,IAAMG,EAAgBG,KAAKW,UAAUjB,GACrCI,aAAac,QAAQjB,EAAKE,GDqBtBgB,CAAqB,QAAS,CAACV,IAAKA,EAAKC,IAAKA,IAmClD,OACI,yBAAKzC,UAAU,OACX,kBAAC,EAAD,CAAiBY,OAAQ4B,EACRnD,OAAQoD,EACRlD,YAAaA,EAAYE,SAAS,aAClCoC,SAXzB,WACIkB,IACAF,EAAgBL,GAChBM,EAAe,KASMpB,eA5BzB,SAAqBT,GACjB2B,EAAO3B,GAEH6B,EADA7B,GAASuB,GAAOA,EAAM,EACP,kBAEA,iCAwBEb,eArBzB,SAAqBV,GACjB0B,EAAO1B,GAEH6B,EADA7B,EAAQ,GAAKA,GAASwB,EACP,kBAEA,mCAkBf,kBAAC,EAAD,CAAS7B,OAAQ4B,EACRnD,OAAQoD,EACRlD,YAAaA,EACbD,aAAcA,EACduB,oBAxCjB,WACIgC,EAAgBL,IAwCH1B,uBA7CjB,WAEI+B,EADgBvD,EAAc,QEhBlB6D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDiItB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAxE,GACLyE,QAAQzE,MAAMA,EAAM0E,c","file":"static/js/main.b14310c5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter_wrapper\":\"Display_counter_wrapper__2b6ux\",\"simple_number\":\"Display_simple_number__3T_kI\",\"end_number\":\"Display_end_number__2GoAj\",\"error\":\"Display_error__5keDu\",\"help_message\":\"Display_help_message__1L9Cb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button_wrapper\":\"Button_button_wrapper__5jH1p\",\"button\":\"Button_button__1vtEv\",\"disabled\":\"Button_disabled__KXQmA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"number\":\"Input_number__1Z4QO\",\"input\":\"Input_input__37-So\",\"error\":\"Input_error__3zDPf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_container\":\"Counter_main_container__2lVPW index_counter_wrapper__27AU6\",\"button_wrapper\":\"Counter_button_wrapper__uflA9 index_btn_counter_wrapper__22DcX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_container\":\"CounterSettings_main_container__3hRtG index_counter_wrapper__27AU6\",\"button_wrapper\":\"CounterSettings_button_wrapper__2t_c7 index_btn_counter_wrapper__22DcX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter_wrapper\":\"SettingsDisplay_counter_wrapper__15hN1\"};","import React from 'react';\r\nimport s from './Display.module.css'\r\n\r\ntype DisplayPropsType = {\r\n    maxNum: number\r\n    currentValue: number\r\n    helpMessage: string\r\n}\r\n\r\nexport const Display: React.FC<DisplayPropsType> = ({maxNum, currentValue, helpMessage}) => {\r\n    const displayMessageClass = helpMessage.includes('incorrect')\r\n        ? `${s.error} ${s.simple_number}`\r\n        : `${s.help_message} ${s.simple_number}`\r\n\r\n    const spanClass = currentValue === maxNum\r\n        ? `${s.end_number} ${s.simple_number}`\r\n        : s.simple_number\r\n\r\n    return (\r\n        <div className={s.counter_wrapper}>\r\n            {helpMessage.length !== 0\r\n                ? <p className={displayMessageClass}>{helpMessage}</p>\r\n                : <span className={spanClass}>\r\n                    {currentValue}</span>\r\n            }\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Button.module.css'\r\n\r\ntype ButtonPropsType = {\r\n    callback: () => void\r\n    title: string\r\n    disabled: boolean\r\n}\r\n\r\nexport const Button: React.FC<ButtonPropsType> = (props: ButtonPropsType) => {\r\n    return (\r\n        <div className={s.button_wrapper}>\r\n            <button className={props.disabled ? `${s.disabled} ${s.button}` : s.button}\r\n                    onClick={props.callback}\r\n                    disabled={props.disabled}>\r\n                {props.title}\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\r\nimport {Display} from './Display/Display';\r\nimport {Button} from '../common/Button/Button';\r\nimport s from './Counter.module.css'\r\n\r\ntype CounterPropsType = {\r\n    minNum: number\r\n    maxNum: number\r\n    helpMessage: string\r\n    currentValue: number\r\n    resetNumberCallback: () => void\r\n    increaseNumberCallback: () => void\r\n}\r\n\r\nexport const Counter: React.FC<CounterPropsType> = ({minNum, maxNum, helpMessage, currentValue, resetNumberCallback, increaseNumberCallback}) => {\r\n\r\n    return (\r\n        <div className={s.main_container}>\r\n            <Display currentValue={currentValue}\r\n                     helpMessage={helpMessage}\r\n                     maxNum={maxNum}\r\n            />\r\n            <div className={s.button_wrapper}>\r\n                <Button callback={increaseNumberCallback}\r\n                        title={'start'}\r\n                        disabled={helpMessage || currentValue === maxNum ? true : false}/>\r\n                <Button callback={resetNumberCallback}\r\n                        title={'reset'}\r\n                        disabled={helpMessage || currentValue === minNum ? true : false}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport s from './Input.module.css'\r\n\r\ntype InputPropsType = {\r\n    value: number\r\n    callback: (value: number) => void\r\n    className: boolean\r\n    label: string\r\n}\r\n\r\nexport const Input: React.FC<InputPropsType> = ({value, callback, className,label}) => {\r\n    return (\r\n        <div className={s.number}>\r\n            <label>{label}\r\n                <input type=\"number\"\r\n                       value={value}\r\n                       onChange={(e) => callback(+e.currentTarget.value)}\r\n                       className={className ? `${s.error} ${s.input}` : s.input}\r\n                />\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport s from './SettingsDisplay.module.css'\r\nimport {Input} from '../../common/Input/Input';\r\n\r\ntype SettingsDisplayPropsType = {\r\n    maxNum: number\r\n    minNum: number\r\n    helpMessage: boolean\r\n    changeMaxValue: (value: number) => void\r\n    changeMinValue: (value: number) => void\r\n}\r\n\r\nexport const SettingsDisplay: React.FC<SettingsDisplayPropsType> = ({maxNum, minNum,helpMessage, changeMaxValue, changeMinValue}) => {\r\n\r\n    return (\r\n        <div className={s.counter_wrapper}>\r\n            <Input value={maxNum}\r\n                   callback={changeMaxValue}\r\n                   className={helpMessage}\r\n                   label={'max value:'}\r\n            />\r\n            <Input value={minNum}\r\n                   callback={changeMinValue}\r\n                   className={helpMessage}\r\n                   label={'min value:'}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {SettingsDisplay} from './Display/SettingsDisplay';\r\nimport s from './CounterSettings.module.css'\r\nimport {Button} from '../common/Button/Button';\r\n\r\ntype CounterPropsType = {\r\n    maxNum: number\r\n    minNum: number\r\n    helpMessage: boolean\r\n    setValue: () => void\r\n    changeMaxValue: (value: number) => void\r\n    changeMinValue: (value: number) => void\r\n}\r\n\r\nexport const CounterSettings: React.FC<CounterPropsType> = (props) => {\r\n\r\n    return (\r\n        <div className={s.main_container}>\r\n            <SettingsDisplay maxNum={props.maxNum}\r\n                             minNum={props.minNum}\r\n                             helpMessage={props.helpMessage}\r\n                             changeMaxValue={props.changeMaxValue}\r\n                             changeMinValue={props.changeMinValue}\r\n            />\r\n            <div className={s.button_wrapper}>\r\n                <Button callback={props.setValue}\r\n                        title={'set'}\r\n                        disabled={props.helpMessage}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport {Counter} from './CounterTable/Counter';\nimport {CounterSettings} from './CounterSettings/CounterSettings';\nimport {restoreState, saveState} from './common/localStorage';\n\ntype ValueType = {\n    min: number\n    max: number\n}\n\nfunction App() {\n\n    const state: ValueType = restoreState<ValueType>('value', {min: 0, max: 5});\n\n    let [min, setMin] = useState<number>(state.min)\n    let [max, setMax] = useState<number>(state.max)\n    let [currentValue, setCurrentValue] = useState<number>(min)\n\n\n    let [helpMessage, setHelpMessage] = useState<string>('')\n\n    function saveToStorage() {\n        saveState<ValueType>('value', {min: min, max: max});\n    };\n\n    //Display\n    function increaseNumber() {\n        let plusValue = currentValue +1\n        setCurrentValue(plusValue)\n    }\n    function resetNumber() {\n        setCurrentValue(min)\n    }\n\n    //Settings\n    function setMaxValue(value: number) {\n        setMax(value)\n        if (value <= min || min < 0) {\n            setHelpMessage('incorrect value')\n        } else {\n            setHelpMessage(`enter values and press 'set'`)\n        }\n    }\n    function setMinValue(value: number) {\n        setMin(value)\n        if (value < 0 || value >= max) {\n            setHelpMessage('incorrect value')\n        } else {\n            setHelpMessage(`enter values and press 'set'`)\n        }\n    }\n    function setValue() {\n        saveToStorage()\n        setCurrentValue(min)\n        setHelpMessage('')\n    }\n\n    return (\n        <div className='App'>\n            <CounterSettings minNum={min}\n                             maxNum={max}\n                             helpMessage={helpMessage.includes('incorrect')}\n                             setValue={setValue}\n                             changeMaxValue={setMaxValue}\n                             changeMinValue={setMinValue}\n            />\n            <Counter minNum={min}\n                     maxNum={max}\n                     helpMessage={helpMessage}\n                     currentValue={currentValue}\n                     resetNumberCallback={resetNumber}\n                     increaseNumberCallback={increaseNumber}\n            />\n        </div>\n    )\n}\n\nexport default App;\n","export function saveState<T>(key: string, state: T) {\r\n    const stateAsString = JSON.stringify(state);\r\n    localStorage.setItem(key, stateAsString)\r\n}\r\n\r\nexport function restoreState<T>(key: string, defaultState: T) {\r\n    const stateAsString = localStorage.getItem(key);\r\n    if (stateAsString !== null) defaultState = JSON.parse(stateAsString) as T;\r\n    return defaultState;\r\n}\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}