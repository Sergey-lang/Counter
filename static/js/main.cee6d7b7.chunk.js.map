{"version":3,"sources":["Display/Button/Button.tsx","Display/Display.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Button","props","className","onClick","callback","disabled","title","Display","currentNumb","increaseNumbCallback","resetNumbCallback","App","useState","value","setValue","plusValue","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oRASO,SAASA,EAAOC,GACnB,OACI,yBAAKC,UAAU,sBACX,4BAAQA,UAAU,aACVC,QAASF,EAAMG,SACfC,SAAUJ,EAAMI,UAAWJ,EAAMK,QCJ9C,SAASC,EAAQN,GAEpB,OACI,yBAAKC,UAAU,mBACX,yBAAKA,UAAiC,IAAtBD,EAAMO,YAAoB,0BAA4B,mBAClE,yBAAKN,UAAiC,IAAtBD,EAAMO,YAAoB,aAAe,iBACrD,8BAAOP,EAAMO,eAGrB,yBAAKN,UAAU,kBACX,kBAAC,EAAD,CAAQE,SAAUH,EAAMQ,qBAChBH,MAAO,MACPD,SAAUJ,EAAMO,aAAe,IAAK,IAE5C,kBAAC,EAAD,CAAQJ,SAAUH,EAAMS,kBAChBJ,MAAO,QACPD,SAAUJ,EAAMO,aAAe,IAAK,M,MCA7CG,MAtBf,WAAgB,IAAD,EACaC,mBAAiB,GAD9B,mBACNC,EADM,KACCC,EADD,KAYX,OACI,yBAAKZ,UAAU,kBACX,kBAAC,EAAD,CAASO,qBAXjB,WACI,IAAIM,EAAYF,GAAS,EACzBC,EAASC,IAUIP,YAAaK,EACbH,kBARjB,WACII,EAAS,QCDGE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cee6d7b7.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Button.css'\r\n\r\ntype ButtonPropsType = {\r\n    callback: () => void\r\n    title: string\r\n    disabled: boolean\r\n}\r\n\r\nexport function Button(props: ButtonPropsType) {\r\n    return (\r\n        <div className='inc_button_wrapper'>\r\n            <button className='inc_button'\r\n                    onClick={props.callback}\r\n                    disabled={props.disabled}>{props.title}\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport './Display.css'\r\nimport { Button } from './Button/Button';\r\n\r\ntype DisplayPropsType = {\r\n    currentNumb: number\r\n    increaseNumbCallback: () => void\r\n    resetNumbCallback: () => void\r\n}\r\n\r\nexport function Display(props: DisplayPropsType) {\r\n   \r\n    return (\r\n        <div className='counter_wrapper'>\r\n            <div className={props.currentNumb === 5 ? 'display_wrapper max_num' : 'display_wrapper'}>\r\n                <div className={props.currentNumb === 5 ? 'end_number' : 'simple_number'}>\r\n                    <span>{props.currentNumb}</span>\r\n                </div>\r\n            </div>\r\n            <div className='button_wrapper'>\r\n                <Button callback={props.increaseNumbCallback}\r\n                        title={'inc'}\r\n                        disabled={props.currentNumb >= 5 && true}\r\n                />\r\n                <Button callback={props.resetNumbCallback}\r\n                        title={'reset'}\r\n                        disabled={props.currentNumb <= 0 && true}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\nimport {Display} from './Display/Display';\nimport './App.css';\n\nfunction App() {\n    let [value, setValue] = useState<number>(0)\n\n    function increaseNumbCallback() {\n        let plusValue = value += 1\n        setValue(plusValue)\n    }\n\n    function resetNumCallback() {\n        setValue(0)\n    }\n\n    return (\n        <div className='main_container'>\n            <Display increaseNumbCallback={increaseNumbCallback}\n                     currentNumb={value}\n                     resetNumbCallback={resetNumCallback}\n            />\n        </div>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}